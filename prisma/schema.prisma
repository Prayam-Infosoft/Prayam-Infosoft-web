// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @unique @default(uuid()) 
  fname     String?  
  lname     String?  
  email     String   @unique 
  password  String   
  mobile    String?     
  role      UserRole @default(Client) 
  otp       String?
  otpExpiresOn DateTime?
  isVerfiy  Boolean @default(false)
  marketingEmails Boolean @default(true)
  securityEmails Boolean @default(true)
  updatesEmails Boolean @default(true)
  createdAt DateTime @default(now())  
  updatedAt DateTime? 
  subscriptions Subscription[]
}
model Service {
  id          String   @unique @default(uuid())
  name        String   
  description String
  categoryId  String   
  category    Category @relation(fields: [categoryId], references: [id])
  features    Features[]
  plans       Plan[]
}

model Category {
  id          String   @unique @default(uuid())
  name        String
  service     Service[]
}
model Features {
  id          String @unique @default(uuid())
  title       String
  content     String
  serviceId   String
  service     Service @relation(fields: [serviceId], references: [id])
}
model Plan {
  id          String   @unique @default(uuid()) 
  name        String   
  description String   
  price       Int   
  duration    Int      //In Months   
  serviceId   String   
  service     Service  @relation(fields: [serviceId], references: [id])
  subscriptions Subscription[] 
}
model Subscription {
  id           String   @unique @default(uuid()) 
  status       SubscriptionStatus @default(Pending) 
  startDate    DateTime @default(now()) 
  endDate      DateTime                 
  userId       String                   
  user         User      @relation(fields: [userId], references: [id])
  planId       String                   
  plan         Plan      @relation(fields: [planId], references: [id]) 
  license      License[]
  payments     Payment[]
}
model License {
  id          String   @unique @default(uuid()) 
  licenseKey  String   
  expiryDate  DateTime 
  status      LicenseStatus 
  createdAt   DateTime @default(now())  
  subscriptionId String                 
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}
model Payment {
  id          String   @unique @default(uuid()) 
  amount      Int      
  currency    String   
  paymentDate DateTime @default(now()) 
  status      PaymentStatus 
  method      String?  
  subscriptionId String 
  subscription Subscription @relation(fields: [subscriptionId], references: [id]) 
  razorpayPaymentId String? 
}

enum UserRole {
  Admin
  Client
}

enum SubscriptionStatus {
  Pending
  Active
  Expired
}

enum LicenseStatus {
  Pending
  Active
  Expired
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}
